answer 1 

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        
        //..... YOUR CODE STARTS HERE .....
        
          System.out.println("Result of operation 1: "+(a+b)*c);
          System.out.println("Result of operation 2: "+(b-d)/a);
          System.out.println("Result of operation 3: "+((a*d)+c));
          System.out.println("Result of operation 4: "+(a+b+c+d)/2);
        
        //..... YOUR CODE ENDS HERE .....
    }
}


answer 2

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        float f1 = sc.nextFloat();
        float f2 = sc.nextFloat();
        
        int n1 = (int) f1;
        int n2 = (int) f2;
        
        //..... YOUR CODE STARTS HERE .....
        int bitwiseAND = n1 & n2;
        int bitwiseOR = n1 | n2;
        int bitwiseXOR = n1 ^ n2;
        int bitwiseNOTAND = (~n1) & n2;
         
         System.out.println("Bitwise AND result: " +bitwiseAND);
         System.out.println("Bitwise OR result: " +bitwiseOR);
         System.out.println("Bitwise XOR result: " +bitwiseXOR);
         System.out.println("Bitwise NOT and AND result: " +bitwiseNOTAND);
         
        
        //..... YOUR CODE ENDS HERE .....
    }
}


answer 3

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();
        // Transformations
        //..... YOUR CODE STARTS HERE .....
        
        if (a % 2 == 0){
            a += b;
        }
        if (b % 2 != 0){
            c *= 2;
        }
        if (c % 3 == 0){
            c += a;
        }
        if ((a+b+c) > 100){
            a -= 100;
            b -= 100;
            c -= 100;
        }
        
       
        
        //..... YOUR CODE ENDS HERE .....
        // Output
        System.out.println("a: " + a + ", b: " + b + ", c: " + c);
    }
}



answer 4 


import java.util.Scanner;



public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

            //..... YOUR CODE STARTS HERE .....

            int Evensum = 0;

            int Oddsum = 0;

            

            int n = scanner.nextInt();

            

            for (int i = 0; i < n; i++){

                int num = scanner.nextInt();

                

                

                if (num == -1){

                    break;

                }

            

        

            

            if (num % 2 == 0){

                Evensum += num;

            }else {

                Oddsum += num;

            }

        }

            

            if (Evensum<Oddsum){

                System.out.println("Odd Sum Greater");

            }else if (Evensum>Oddsum){

                System.out.println("Even Sum Greater");

            }else{

                System.out.println("Equal");

            }

            

            

            

            //..... YOUR CODE ENDS HERE .....

    }

}



answer 5



import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //..... YOUR CODE STARTS HERE .....
        int count = scanner.nextInt();
        
        for (int i = 0; i < count; i++){
            
            
        
       
        int scores = scanner.nextInt();
        
        
        
        if (scores == -1){
            break;
        }
        
        if (scores <= 100 && scores >=90){
            System.out.println("Excellent");
        }else if (scores <= 89 && scores >= 75){
           System.out.println("Good");
        }else if (scores <= 74 && scores >= 50){
            System.out.println("Average");
        }else if (scores <= 49 && scores >= 35){
            System.out.println("Pass");
        }else if(scores <= 34 && scores >= 0) {
            System.out.println("Fail");
        }else {
            System.out.println("Invalid scores");
        }
    }
        
        //..... YOUR CODE ENDS HERE .....
        scanner.close();
    }
}




answer 6



import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
         //..... YOUR CODE STARTS HERE .....
    
        while (true) {
            int month = scanner.nextInt();
            int year = scanner.nextInt();

            // Stop condition
            if (month == -1 && year == -1) {
                break;
            }

            // Validate month input
            if (month < 1 || month > 12) {
                System.out.println("Invalid month input");
                continue;
            }

            int days = 0;

            switch (month) {
                case 1: case 3: case 5: case 7: case 8: case 10: case 12:
                    days = 31;
                    break;
                case 4: case 6: case 9: case 11:
                    days = 30;
                    break;
                case 2:
                    // Check for leap year
                    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                        days = 29;
                    } else {
                        days = 28;
                    }
                    break;
            }

            System.out.println(days);
        }

        //..... YOUR CODE ENDS HERE .....
        
        scanner.close();
    }
}



answer 7


import java.util.Scanner;



public class Main {

    public static void main(String[] args) {

        //..... YOUR CODE STARTS HERE .....

        Scanner sc = new Scanner(System.in);

        int registeredVoters = sc.nextInt();

        int numberofcandidate = sc.nextInt();

        int numberofvotes = sc.nextInt();

        

        for (int i = 0; i<numberofvotes; i++){

            int candidateID = sc.nextInt();

            if (candidateID>= 1 && candidateID <= numberofcandidate){

                System.out.println("VALID");

                

            }else{

                System.out.println("INVALID");

            }

        }

        

        

        //..... YOUR CODE ENDS HERE .....

    }

}




answer 8

import java.util.Scanner;



public class Main {

    public static void main(String[] args) {

        //..... YOUR CODE STARTS HERE .....

        

        Scanner sc = new Scanner(System.in);

        int levels = sc.nextInt();

        

        for (int i = 1; i <= levels; i++) {

            char symbol = (i % 2 == 1) ? '*' : '#';

            for(int j = 1; j <= i; j++) {

                System.out.print(symbol);

            }

            System.out.println();

        }

        

        //..... YOUR CODE ENDS HERE .....

    }

}



answer 9


import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String make = scanner.next();
        String model = scanner.next();
        int year = scanner.nextInt();
        int currentYear = scanner.nextInt();

        Car car = new Car(make, model, year);
        int age = car.getCarAge(currentYear);

        if (age != -1) {
            System.out.println(age);
        }
    }
}

class Car {
    //..... YOUR CODE STARTS HERE .....
    private String model;
    private String make;
    private int year;
    
    public Car(String make,String model, int year ){
        this.make = make;
        this.model = model;
        this.year = year;
    }
    
    public int getCarAge(int currentYear) {
        if (year > currentYear) {
            System.out.println("Invalid year");
            return -1;
        }
        return currentYear-this.year;
    } 
    
    
    //..... YOUR CODE ENDS HERE .....
}


answer 10



import java.util.Scanner;

interface Shape {
    double area();
    double perimeter();
}

class Rectangle implements Shape {
   //..... YOUR CODE STARTS HERE .....
          private double length, width;
public Rectangle(double l,double w)
         {
             length = l;
             width = w;
         }
         public double area ()
         {
             return length*width;
         }
         public double perimeter()
         {
             return 2*(length+width);
         }
   
   
   //..... YOUR CODE ENDS HERE .....
}

class Circle implements Shape {
   //..... YOUR CODE STARTS HERE .....
   private double radius;
   public Circle(double r)
   {
       radius = r; 
   }
   public double area()
   {
       return 3.41*radius*radius;
   }
   public double perimeter()
   {
       return 2*3.14*radius;
   }
   
   
   //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String shapeType = scanner.next();
        Shape shape;

        if (shapeType.equals("Rectangle")) {
            double length = scanner.nextDouble();
            double width = scanner.nextDouble();
            shape = new Rectangle(length, width);
        } else if (shapeType.equals("Circle")) {
            double radius = scanner.nextDouble();
            shape = new Circle(radius);
        } else {
            System.out.println("Invalid shape type");
            return;
        }

        System.out.println("Area: " + shape.area());
        System.out.println("Perimeter: " + shape.perimeter());
    }
}



answer 11



import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String name = scanner.next();
        int age = scanner.nextInt();

        Person person = new Person();
        person.setName(name);
        person.setAge(age);

        if (age > 0) {
            System.out.println("Name: " + person.getName());
            System.out.println("Age: " + person.getAge());
        }
    }
}

class Person {
    //..... YOUR CODE STARTS HERE .....
    private String name;
    private int age;
    public void setName(String n){
        name=n;
    }
public void setAge(int a)
 {
     if (a>0)
     {
         age = a;
     }
     else
     {
         System.out.println("Invalid age");
     }
 }
 public String getName(){
     return name;
 }
 public int getAge()
 {
     return age;
 }
    
    
    //..... YOUR CODE ENDS HERE .....
}



answer 12




import java.util.Scanner;

interface Employee {
    double calculateSalary();
    String getDetails();
}

class FullTimeEmployee implements Employee {
   //..... YOUR CODE STARTS HERE .....
   private String name;
   private double monthlySalary;
   public FullTimeEmployee(String name,double monthlySalary){
       this.name=name;
       this.monthlySalary=monthlySalary;
      
   }
   public double calculateSalary(){
       return monthlySalary;
   }
   public String getDetails(){
       return "Name: "+name+", Salary: "+calculateSalary();
   }
   
   
   //..... YOUR CODE ENDS HERE .....
}

class PartTimeEmployee implements Employee {
   //..... YOUR CODE STARTS HERE .....
   private String name;
   private double  hourlyRate;
   private int hoursWorked;
   public PartTimeEmployee(String name, double hourlyRate,int hoursWorked){
       this.name=name;
       this.hourlyRate=hourlyRate;
       this.hoursWorked=hoursWorked;
   }
   public double calculateSalary(){
       return hourlyRate*hoursWorked;
   }
   public String getDetails(){
       return "Name: "+name+", Salary: "+calculateSalary();
   }
   
   
   //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String employeeType = scanner.next();
        Employee employee;

        if (employeeType.equals("FullTimeEmployee")) {
            String name = scanner.next();
            double monthlySalary = scanner.nextDouble();
            employee = new FullTimeEmployee(name, monthlySalary);
        } else if (employeeType.equals("PartTimeEmployee")) {
            String name = scanner.next();
            double hourlyRate = scanner.nextDouble();
            int hoursWorked = scanner.nextInt();
            employee = new PartTimeEmployee(name, hourlyRate, hoursWorked);
        } else {
            System.out.println("Invalid employee type");
            return;
        }

        System.out.println(employee.getDetails());
    }
}



answer 13
import java.util.Scanner;

interface Employee {
    double calculateSalary();
    String getDetails();
}

class FullTimeEmployee implements Employee {
   //..... YOUR CODE STARTS HERE .....
   private String name;
   private double monthlySalary;
   public FullTimeEmployee(String name,double monthlySalary){
       this.name=name;
       this.monthlySalary=monthlySalary;
      
   }
   public double calculateSalary(){
       return monthlySalary;
   }
   public String getDetails(){
       return "Name: "+name+", Salary: "+calculateSalary();
   }
   
   
   //..... YOUR CODE ENDS HERE .....
}

class PartTimeEmployee implements Employee {
   //..... YOUR CODE STARTS HERE .....
   private String name;
   private double  hourlyRate;
   private int hoursWorked;
   public PartTimeEmployee(String name, double hourlyRate,int hoursWorked){
       this.name=name;
       this.hourlyRate=hourlyRate;
       this.hoursWorked=hoursWorked;
   }
   public double calculateSalary(){
       return hourlyRate*hoursWorked;
   }
   public String getDetails(){
       return "Name: "+name+", Salary: "+calculateSalary();
   }
   
   
   //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String employeeType = scanner.next();
        Employee employee;

        if (employeeType.equals("FullTimeEmployee")) {
            String name = scanner.next();
            double monthlySalary = scanner.nextDouble();
            employee = new FullTimeEmployee(name, monthlySalary);
        } else if (employeeType.equals("PartTimeEmployee")) {
            String name = scanner.next();
            double hourlyRate = scanner.nextDouble();
            int hoursWorked = scanner.nextInt();
            employee = new PartTimeEmployee(name, hourlyRate, hoursWorked);
        } else {
            System.out.println("Invalid employee type");
            return;
        }

        System.out.println(employee.getDetails());
    }
}


answer 14




import java.util.ArrayList;
import java.util.Scanner;

class Book {
   //..... YOUR CODE STARTS HERE .....
   
   private String title;
    private String author;
    private boolean isBorrowed;

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
        this.isBorrowed = false;
    }

    public String getTitle() {
        return title;
    }

    public boolean isBorrowed() {
        return isBorrowed;
    }

    public void borrowBook() {
        isBorrowed = true;
    }

    public void returnBook() {
        isBorrowed = false;
    }
   
   //..... YOUR CODE ENDS HERE .....
}

class Library {
   //..... YOUR CODE STARTS HERE .....
   
   private ArrayList<Book> books;

    public Library() {
        books = new ArrayList<>();
    }

    public void addBook(String title, String author) {
        books.add(new Book(title, author));
        System.out.println("Book added");
    }

    public void borrowBook(String title) {
        for (Book book : books) {
            if (book.getTitle().equals(title)) {
                if (!book.isBorrowed()) {
                    book.borrowBook();
                    System.out.println("Book borrowed");
                    return;
                } else {
                    System.out.println("Book not available");
                    return;
                }
            }
        }
        System.out.println("Book not found");
    }

    public void returnBook(String title) {
        for (Book book : books) {
            if (book.getTitle().equals(title)) {
                if (book.isBorrowed()) {
                    book.returnBook();
                    System.out.println("Book returned");
                    return;
                } else {
                    System.out.println("Book was not borrowed");
                    return;
                }
            }
        }
        System.out.println("Book not found");
    }
   
   //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
   
   Scanner scanner = new Scanner(System.in);
        Library library = new Library();

        int N = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        for (int i = 0; i < N; i++) {
            String operation = scanner.nextLine();
            String[] parts = operation.split(" ");
            String command = parts[0];

            switch (command) {
                case "add":
                    String title = parts[1];
                    String author = parts[2];
                    library.addBook(title, author);
                    break;
                case "borrow":
                    title = parts[1];
                    library.borrowBook(title);
                    break;
                case "return":
                    title = parts[1];
                    library.returnBook(title);
                    break;
                default:
                    System.out.println("Invalid operation");
                    break;
            }
        }

        scanner.close();
    
   
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 15


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

class Student {
    //..... YOUR CODE STARTS HERE .....
    
    private String name;
    private double totalMarks;
    private int marksCount;
    private char grade;

    public Student(String name) {
        this.name = name;
        this.totalMarks = 0;
        this.marksCount = 0;
    }

    public void addMarks(double mark) {
        totalMarks += mark;
        marksCount++;
        System.out.println("Marks added");
    }

    public void calculateGrade() {
        if (marksCount > 0) {
            double average = totalMarks / marksCount;
            if (average >= 90) {
                grade = 'A';
            } else if (average >= 80) {
                grade = 'B';
            } else if (average >= 70) {
                grade = 'C';
            } else if (average >= 60) {
                grade = 'D';
            } else {
                grade = 'F';
            }
            System.out.println("Grade calculated");
        } else {
            System.out.println("No marks available to calculate grade");
        }
    }

    public void displayDetails() {
        double average = marksCount > 0 ? totalMarks / marksCount : 0;
        System.out.printf("%s: %.1f - %c%n", name, average, grade); // Changed to %.1f
    }
    
    //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
    
    Scanner scanner = new Scanner(System.in);
        HashMap<String, Student> studentMap = new HashMap<>();

        int N = scanner.nextInt();
        scanner.nextLine(); // Consume the newline

        for (int i = 0; i < N; i++) {
            String[] input = scanner.nextLine().split(" ");
            String command = input[0];
            String name = input[1];

            Student student = studentMap.computeIfAbsent(name, Student::new);

            if (command.equals("add")) {
                double mark = Double.parseDouble(input[2]);
                student.addMarks(mark);
            } else if (command.equals("calculate")) {
                student.calculateGrade();
            } else if (command.equals("display")) {
                student.displayDetails();
            }
        }

        scanner.close();
        
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 16



import java.util.ArrayList;
import java.util.Scanner;

class Appliance {
    //..... YOUR CODE STARTS HERE .....
    
    int applianceID;
    String name;
    double powerRating;
    boolean status;  // true for 'on', false for 'off'

    // Parameterized constructor
    public Appliance(int applianceID, String name, double powerRating, boolean status) {
        this.applianceID = applianceID;
        this.name = name;
        this.powerRating = powerRating;
        this.status = status;
    }

    // Method to toggle the status
    public void toggleStatus() {
        this.status = !this.status;
    }

    // Method to get the power rating
    public double getPowerRating() {
        return this.powerRating;
    }

    // Method to check if the appliance is on
    public boolean isOn() {
        return this.status;
    }
    
    //..... YOUR CODE ENDS HERE .....
}

class SmartHome {
    //..... YOUR CODE STARTS HERE .....
    
   Appliance[] appliances;
    int count;

    // Constructor to initialize SmartHome with a max capacity of appliances
    public SmartHome() {
        appliances = new Appliance[100];  // Default maximum capacity is 100 appliances
        count = 0;
    }

    // Method to add a new appliance
    public void addAppliance(Appliance appliance) {
        if (count < appliances.length) {
            appliances[count++] = appliance;
        }
    }

    // Method to remove an appliance by ID
    public boolean removeAppliance(int applianceID) {
        for (int i = 0; i < count; i++) {
            if (appliances[i].applianceID == applianceID) {
                // Shift the remaining appliances
                for (int j = i; j < count - 1; j++) {
                    appliances[j] = appliances[j + 1];
                }
                count--;
                return true;
            }
        }
        return false;  // Appliance not found
    }

    // Method to toggle appliance status by ID
    public boolean toggleApplianceStatus(int applianceID) {
        for (int i = 0; i < count; i++) {
            if (appliances[i].applianceID == applianceID) {
                appliances[i].toggleStatus();
                return true;
            }
        }
        return false;  // Appliance not found
    }

    // Method to calculate total power consumption of appliances that are 'on'
    public double calculateTotalPower() {
        double totalPower = 0;
        for (int i = 0; i < count; i++) {
            if (appliances[i].isOn()) {
                totalPower += appliances[i].getPowerRating();
            }
        }
        return totalPower;
    }
   
    //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SmartHome smartHome = new SmartHome();

        // Input the number of appliances
        int n = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        // Add appliances to the system
        for (int i = 0; i < n; i++) {
            int applianceID = scanner.nextInt();
            String name = scanner.next();
            double powerRating = scanner.nextDouble();
            String status = scanner.next();
            scanner.nextLine();  // Consume newline

            boolean isOn = status.equalsIgnoreCase("on");
            Appliance appliance = new Appliance(applianceID, name, powerRating, isOn);
            smartHome.addAppliance(appliance);
        }

        // Input the number of operations
        int m = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        // Perform operations
        for (int i = 0; i < m; i++) {
            String operation = scanner.next();
            switch (operation.toLowerCase()) {
                case "remove":
                    int applianceID = scanner.nextInt();
                    if (smartHome.removeAppliance(applianceID)) {
                        System.out.println("Appliance removed successfully");
                    } else {
                        System.out.println("Appliance not found");
                    }
                    break;

                case "toggle":
                    applianceID = scanner.nextInt();
                    if (smartHome.toggleApplianceStatus(applianceID)) {
                        System.out.println("Appliance status toggled");
                    } else {
                        System.out.println("Appliance not found");
                    }
                    break;

                case "calculate":
                    double totalPower = smartHome.calculateTotalPower();
                    System.out.println("Total Power Consumption: " + totalPower + " kW");
                    break;
            }
        }
        scanner.close();
    }
}




answer 17


import java.util.Scanner;

class Vehicle {
    //..... YOUR CODE STARTS HERE .....
    
    String registrationNumber;
    String ownerName;

    // Constructor to initialize registration number and owner name
    public Vehicle(String registrationNumber, String ownerName) {
        this.registrationNumber = registrationNumber;
        this.ownerName = ownerName;
    }

    // Method to display vehicle details
    public void displayDetails() {
        System.out.println("Registration Number: " + registrationNumber);
        System.out.println("Owner: " + ownerName);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

class Car extends Vehicle {
    //..... YOUR CODE STARTS HERE .....
    
    int numberOfDoors;

    // Constructor to initialize Car attributes
    public Car(String registrationNumber, String ownerName, int numberOfDoors) {
        super(registrationNumber, ownerName);
        this.numberOfDoors = numberOfDoors;
    }

    // Overriding displayDetails method to include Car-specific details
    @Override
    public void displayDetails() {
        System.out.println("Vehicle: Car");
        super.displayDetails();
        System.out.println("Number of Doors: " + numberOfDoors);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

class Motorcycle extends Vehicle {
    //..... YOUR CODE STARTS HERE .....
    
    String engineCapacity;

    // Constructor to initialize Motorcycle attributes
    public Motorcycle(String registrationNumber, String ownerName, String engineCapacity) {
        super(registrationNumber, ownerName);
        this.engineCapacity = engineCapacity;
    }

    // Overriding displayDetails method to include Motorcycle-specific details
    @Override
    public void displayDetails() {
        System.out.println("Vehicle: Motorcycle");
        super.displayDetails();
        System.out.println("Engine Capacity: " + engineCapacity);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

class Truck extends Vehicle {
    //..... YOUR CODE STARTS HERE .....
    
    String cargoCapacity;

    // Constructor to initialize Truck attributes
    public Truck(String registrationNumber, String ownerName, String cargoCapacity) {
        super(registrationNumber, ownerName);
        this.cargoCapacity = cargoCapacity;
    }

    // Overriding displayDetails method to include Truck-specific details
    @Override
    public void displayDetails() {
        System.out.println("Vehicle: Truck");
        super.displayDetails();
        System.out.println("Cargo Capacity: " + cargoCapacity);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);

        // Input the number of operations
        int N = scanner.nextInt();
        scanner.nextLine();  // Consume the newline

        // Process each registration operation
        for (int i = 0; i < N; i++) {
            String operation = scanner.nextLine();
            String[] parts = operation.split(" ");

            // Extract the operation details
            String vehicleType = parts[1];
            String registrationNumber = parts[2];
            String ownerName = parts[3];
            String specificAttribute = parts[4];

            // Register the appropriate vehicle type
            switch (vehicleType.toLowerCase()) {
                case "car":
                    int numberOfDoors = Integer.parseInt(specificAttribute);
                    Car car = new Car(registrationNumber, ownerName, numberOfDoors);
                    car.displayDetails();
                    break;
                case "motorcycle":
                    Motorcycle motorcycle = new Motorcycle(registrationNumber, ownerName, specificAttribute);
                    motorcycle.displayDetails();
                    break;
                case "truck":
                    Truck truck = new Truck(registrationNumber, ownerName, specificAttribute);
                    truck.displayDetails();
                    break;
                default:
                    System.out.println("Unknown vehicle type!");
                    break;
            }
        }

        scanner.close();
        
        //..... YOUR CODE ENDS HERE .....
    }
}



answer 18



        
import java.util.*;

class UserActivityTracker {
    //..... YOUR CODE STARTS HERE .....
    
    private Map<String, Set<String>> userActivities;

    public UserActivityTracker() {
        userActivities = new HashMap<>();
    }

    public void addActivity(String userId, String activity) {
        userActivities.putIfAbsent(userId, new HashSet<>());
        userActivities.get(userId).add(activity);
    }

    public void displayActivities(String userId) {
        if (!userActivities.containsKey(userId) || userActivities.get(userId).isEmpty()) {
            System.out.println("No activities found.");
        } else {
            List<String> activities = new ArrayList<>(userActivities.get(userId));
            Collections.sort(activities);
            for (String activity : activities) {
                System.out.println(activity);
            }
        }
    }
    
    //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
    
    Scanner scanner = new Scanner(System.in);
        UserActivityTracker tracker = new UserActivityTracker();

        int n = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < n; i++) {
            String operation = scanner.nextLine();
            String[] parts = operation.split(" ");

            if (parts[0].equals("ADD_ACTIVITY")) {
                String userId = parts[1];
                String activity = parts[2];
                tracker.addActivity(userId, activity);
            } else if (parts[0].equals("DISPLAY_ACTIVITIES")) {
                String userId = parts[1];
                tracker.displayActivities(userId);
            }
        }

        scanner.close();
    
        //..... YOUR CODE ENDS HERE .....
    }
}


answer 19





import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //..... YOUR CODE STARTS HERE .....
        
        int a = 0;
        int b = 0;

        try {
            a = Integer.parseInt(scanner.nextLine());
            b = Integer.parseInt(scanner.nextLine());

            int result = a / b;
            System.out.println(result);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input");
        } catch (ArithmeticException e) {
            System.out.println("Cannot divide by zero");
        } finally {
            System.out.println("Operation Completed");
        }

        scanner.close();
        
        //..... YOUR CODE ENDS HERE .....
    }
}


answer 20




import java.util.Scanner;

class InvalidAgeException extends Exception {
    //..... YOUR CODE STARTS HERE .....
    
    public InvalidAgeException(String message) {
        super(message);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //..... YOUR CODE STARTS HERE .....
    
    int age = scanner.nextInt();
        
        try {
            if (age < 18) {
                throw new InvalidAgeException("Age must be 18 or older");
            }
            System.out.println("Age is valid");
        } catch (InvalidAgeException e) {
            System.out.println(e.getMessage());
        }
    
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 21


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //..... YOUR CODE STARTS HERE .....
        
        int sum = 0;

        while (true) {
            try {
                String input = scanner.next();
                try {
                    int number = Integer.parseInt(input);
                    sum += number;
                } catch (NumberFormatException e) {
                    continue;
                }
            } catch (Exception e) {
                break;
            }
        }

        System.out.println("Sum of entered integers: " + sum);
        scanner.close();
        
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 22

import java.util.Scanner;

class UnderageException extends Exception {
    //..... YOUR CODE STARTS HERE .....
    
    public UnderageException(String message) {
        super(message);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();

        try {
            if (age < 18) {
                throw new UnderageException("UnderageException: Age " + age + " is below the legal age limit.");
            } else {
                System.out.println("Age verification successful.");
            }
        } catch (UnderageException e) {
            System.out.println(e.getMessage());
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 23


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //..... YOUR CODE STARTS HERE .....
        
        int n = scanner.nextInt();
        int[] array = new int[n];

        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        int index = scanner.nextInt();

        try {
            System.out.println("Element at index " + index + ": " + array[index]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("ArrayIndexOutOfBoundsException: Index " + index + " out of bounds for length " + n);
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 24




import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //..... YOUR CODE STARTS HERE .....
        
        try {
            String dividendInput = scanner.next();
            String divisorInput = scanner.next();

            int dividend = Integer.parseInt(dividendInput);
            int divisor = Integer.parseInt(divisorInput);

            int result = dividend / divisor;
            System.out.println("Result: " + result);

        } catch (NumberFormatException e) {
            System.out.println("NumberFormatException: Invalid input. Please enter integers only.");
        } catch (ArithmeticException e) {
            System.out.println("ArithmeticException: Division by zero is not allowed.");
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}



answer 25

import java.util.Scanner;

// Custom Exception Class
class InvalidUsernameException extends Exception {
    //..... YOUR CODE STARTS HERE .....
    
     public InvalidUsernameException(String message) {
        super(message);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

// UserManager Class
class UserManager {
    //..... YOUR CODE STARTS HERE .....
    
    public void registerUser(String username) throws InvalidUsernameException {
        if (username.length() < 5) {
            throw new InvalidUsernameException("Too short.");
        }
        if (!username.matches("[a-zA-Z0-9]+")) {
            throw new InvalidUsernameException("Contains non-alphanumeric characters.");
        }
        System.out.println("Username registered successfully.");
    }
    
    //..... YOUR CODE ENDS HERE .....
}

// Main Class
public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);
        UserManager userManager = new UserManager();

        String username = scanner.nextLine();

        try {
            userManager.registerUser(username);
        } catch (InvalidUsernameException e) {
            System.out.println("Invalid username: " + e.getMessage());
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 26




import java.util.Scanner;

// Custom Exception Class
class InsufficientFundsException extends Exception {
    //..... YOUR CODE STARTS HERE .....
    
    public InsufficientFundsException(String message) {
        super(message);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

// BankAccount Class
class BankAccount {
    //..... YOUR CODE STARTS HERE .....
    
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public void withdraw(double amount) throws InsufficientFundsException {
        if (amount > balance) {
            throw new InsufficientFundsException("Withdrawal exceeds balance.");
        }
        balance -= amount;
        System.out.println("Withdrawal successful. Remaining balance: " + balance);
    }
    
    //..... YOUR CODE ENDS HERE .....
}

// Main Class
public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);
        
        // Input for initial balance and withdrawal amount
        double initialBalance = scanner.nextDouble();
        double withdrawalAmount = scanner.nextDouble();
        
        BankAccount account = new BankAccount(initialBalance);

        try {
            account.withdraw(withdrawalAmount);
        } catch (InsufficientFundsException e) {
            System.out.println("Insufficient funds: " + e.getMessage());
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 27



import java.util.*;

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);
        
        int n = scanner.nextInt();
        List<Integer> numbers = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            numbers.add(scanner.nextInt());
        }
        
        List<Integer> odds = new ArrayList<>();
        List<Integer> evens = new ArrayList<>();
        
        for (int number : numbers) {
            if (number % 2 != 0) {
                odds.add(number);
            } else {
                evens.add(number);
            }
        }
        
        odds.addAll(evens);
        
        for (int num : odds) {
            System.out.print(num + " ");
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 28


import java.util.*;

public class Main {
    public static void main(String[] args) {
       //..... YOUR CODE STARTS HERE .....
       
        Scanner scanner = new Scanner(System.in);
        
        String input = scanner.nextLine().toLowerCase();
        String[] words = input.split("\\s+");
        
        Set<String> uniqueWords = new HashSet<>(Arrays.asList(words));
        
        System.out.println(uniqueWords.size());
       
       //..... YOUR CODE ENDS HERE .....
    }
}




answer 29



import java.util.*;

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        Set<Integer> set1 = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set1.add(scanner.nextInt());
        }

        int m = scanner.nextInt();
        Set<Integer> set2 = new HashSet<>();
        for (int i = 0; i < m; i++) {
            set2.add(scanner.nextInt());
        }

        set1.retainAll(set2);

        if (set1.isEmpty()) {
            System.out.println("No common elements.");
        } else {
            for (int element : set1) {
                System.out.println(element);
            }
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 30




import java.util.*;

public class Main {
    public static void main(String[] args) {
       //..... YOUR CODE STARTS HERE .....
       
       Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character after the integer input
        String input = scanner.nextLine();
        
        String[] words = input.split("\\s+");
        Map<String, Integer> frequencyMap = new HashMap<>();

        for (String word : words) {
            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);
        }

        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {
            System.out.println(entry.getKey() + " " + entry.getValue());
        }
       
       //..... YOUR CODE ENDS HERE .....
    }
}




answer 31


import java.util.LinkedHashSet;
import java.util.Scanner;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);

        int N = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character after the integer input
        LinkedHashSet<String> shoppingList = new LinkedHashSet<>();

        for (int i = 0; i < N; i++) {
            String operation = scanner.nextLine();
            String[] parts = operation.split(" ", 2);
            String command = parts[0];
            String item = parts.length > 1 ? parts[1] : "";

            if (command.equals("ADD")) {
                shoppingList.add(item);
            } else if (command.equals("REMOVE")) {
                shoppingList.remove(item);
            }
        }

        System.out.println(String.join(", ", shoppingList));
        
        //..... YOUR CODE ENDS HERE .....
    }
}



answer 32


import java.util.*;

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);
        
        String input = scanner.nextLine();
        String[] words = input.split("\\W+"); // Split by non-word characters
        Map<String, Integer> frequencyMap = new HashMap<>();

        for (String word : words) {
            if (!word.isEmpty()) {
                frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);
            }
        }

        List<Map.Entry<String, Integer>> sortedEntries = new ArrayList<>(frequencyMap.entrySet());
        sortedEntries.sort((entry1, entry2) -> {
            int freqCompare = entry2.getValue().compareTo(entry1.getValue());
            return (freqCompare != 0) ? freqCompare : entry1.getKey().compareTo(entry2.getKey());
        });

        for (Map.Entry<String, Integer> entry : sortedEntries) {
            System.out.println(entry.getKey() + " " + entry.getValue());
        }
        
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 33


import java.util.*;

public class Main {
    public static void main(String[] args) {
       //..... YOUR CODE STARTS HERE .....
       
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character after the integer input
        String[] words = scanner.nextLine().split(" ");

        Map<Integer, List<String>> groupedWords = new HashMap<>();

        for (String word : words) {
            int length = word.length();
            groupedWords.putIfAbsent(length, new ArrayList<>());
            groupedWords.get(length).add(word);
        }

        for (Map.Entry<Integer, List<String>> entry : groupedWords.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
       
       //..... YOUR CODE ENDS HERE .....
    }
}




answer 34


import java.util.*;

public class Main {
    public static void main(String[] args) {
       //..... YOUR CODE STARTS HERE .....
       
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character after the integer input
        
        List<String> words = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            words.add(scanner.nextLine()); // Read each word on a new line
        }

        List<String> longestWords = new ArrayList<>();
        int maxLength = 0;

        for (String word : words) {
            int length = word.length();
            if (length > maxLength) {
                longestWords.clear();
                longestWords.add(word);
                maxLength = length;
            } else if (length == maxLength) {
                longestWords.add(word);
            }
        }

        for (String longestWord : longestWords) {
            System.out.println(longestWord);
        }
       
      //..... YOUR CODE ENDS HERE .....
    }
}



answer 35





import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        //..... YOUR CODE STARTS HERE .....
        
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        List<Integer> numbers = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            numbers.add(scanner.nextInt());
        }

        // Lambda expression to compute the sum of even numbers
        int sumOfEvens = numbers.stream()
            .filter(num -> num % 2 == 0)
            .mapToInt(Integer::intValue)
            .sum();

        // Lambda expression to compute the product of odd numbers
        int productOfOdds = numbers.stream()
            .filter(num -> num % 2 != 0)
            .reduce(1, (a, b) -> a * b);

        // Calculate the difference
        int difference = sumOfEvens - productOfOdds;

        System.out.println(difference);
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 36


import java.util.*;

@FunctionalInterface
interface LongestStringFinder {
    //..... YOUR CODE STARTS HERE .....
   
    String findLongest(List<String> strings);
    
     //..... YOUR CODE ENDS HERE .....
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine(); // Consume newline
        List<String> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(sc.nextLine());
        }
        //..... YOUR CODE STARTS HERE .....
   
        LongestStringFinder finder = (strings) -> {
            String longest = "";
            for (String str : strings) {
                if (str.length() > longest.length()) {
                    longest = str;
                }
            }
            return longest;
        };

        String longestString = finder.findLongest(list);
        System.out.println(longestString.length());
   
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 37



import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        var n = sc.nextInt();
        var list = new ArrayList<Integer>();
        for (var i = 0; i < n; i++) {
            list.add(sc.nextInt());
        }
        //..... YOUR CODE STARTS HERE .....
        
        var average = list.stream()
                          .mapToInt(Integer::intValue)
                          .average()
                          .orElse(0.0);
        
        System.out.printf("%.1f%n", average);
        
        //..... YOUR CODE ENDS HERE .....
    }
}



answer 38





import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(sc.nextInt());
        }
        //..... YOUR CODE STARTS HERE .....
        
        list.stream()
            .filter(Main::isPrime)  // Filter for prime numbers
            .sorted(Comparator.reverseOrder()) // Sort in descending order
            .forEach(System.out::println); // Print each prime number
        
        //..... YOUR CODE ENDS HERE .....
    }

    public static boolean isPrime(int num) {
        //..... YOUR CODE STARTS HERE .....
        
        if (num <= 1) return false; // 0 and 1 are not prime
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return false; // Found a divisor
        }
        return true; // It's prime
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 39





import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        var sc = new Scanner(System.in);
        var n = sc.nextInt();
        sc.nextLine();
        var list = new ArrayList<String>();
        for (var i = 0; i < n; i++) {
            list.add(sc.nextLine());
        }
        //..... YOUR CODE STARTS HERE .....
        
        list.stream()
            .filter(word -> word.length() < 5) 
            .map(String::toUpperCase) 
            .forEach(System.out::println);
        
        //..... YOUR CODE ENDS HERE .....
    }
}





answer 40






import java.util.*;
import java.util.function.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        List<String> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(sc.nextLine());
        }
        //..... YOUR CODE STARTS HERE .....
        
        Predicate<String> isPalindrome = str -> str.equals(new StringBuilder(str).reverse().toString());
        boolean hasPalindrome = list.stream().anyMatch(isPalindrome);
        
        System.out.println(hasPalindrome ? "Yes" : "No");
        
        //..... YOUR CODE ENDS HERE .....
    }
}




answer 41



import java.util.*;

public class Main {

public static void main(String[] args) {
var sc=new Scanner(System.in);

 var n=sc.nextInt();

 sc.nextLine();
 var s=sc.nextLine().split(" ");
 var arr=new int[n];
 for(int i=0;i<arr.length;i++){
 arr[i]=Integer.parseInt(s[i]);
 }
 Arrays.sort(arr);
 System.out.println(arr[arr.length-2]);
 
 //..... YOUR CODE ENDS HERE .....
 }
}





answer 42





import java.util.*; 
import java.util.stream.*; 

public class Main { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        int n = sc.nextInt(); 
        List<Integer> list = new ArrayList<>(); 

        for (int i = 0; i < n; i++) { 
            list.add(sc.nextInt()); 
        } 

        //..... YOUR CODE STARTS HERE ..... 

        List<Integer> result = list.stream() 
            .map(num -> num * num) 
            .filter(square -> square % 3 == 0)  // Fixed the typo here
            .collect(Collectors.toList());  

        result.forEach(System.out::println); 
        sc.close(); 

        //..... YOUR CODE ENDS HERE ..... 
    } 
}






answer 43



import java.util.*;
import java.util.function.Function;

class Person {

 String name;
 int age;
 
 Person(String name, int age) {
 this.name = name;
 this.age = age;
 }
 
 @Override
 public String toString() {
 return name + " " + age;
 }
}
public class Main {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 sc.nextLine(); // Consume the newline
 
 List<Person> people = new ArrayList<>();
 for (int i = 0; i < n; i++) {
 String[] input = sc.nextLine().split(" ");
 String name = input[0];
 int age = Integer.parseInt(input[1]);
 people.add(new Person(name, age));
 }
 
 //..... YOUR CODE STARTS HERE .....
 people.sort(Comparator
 .comparingInt((Person p) -> p.age).reversed()
 .thenComparing(p -> p.name)
 ); 
 
 //..... YOUR CODE ENDS HERE .....
 
 people.forEach(System.out::println);
 }
}





answer 44



import java.util.*;



import java.util.function.Predicate;



@FunctionalInterface

interface Condition {

 //..... YOUR CODE STARTS HERE .....

 

 boolean test(int n);

 

 //..... YOUR CODE ENDS HERE .....

}

public class Main {

 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner scanner = new Scanner(System.in);

 // Step 2: Input the number of integers

 int n = scanner.nextInt();

 List<Integer> numbers = new ArrayList<>();

 // Step 3: Input the integers into the list

 for (int i = 0; i < n; i++) {

 numbers.add(scanner.nextInt());

 }

 // Step 4: Create a lambda expression to flter even numbers

 Condition isOdd = (int number) -> number % 2 != 0;

 // Step 5: Filter the odd numbers and print them

 for (int number : numbers) {

 if (isOdd.test(number)) {

 System.out.println(number);

 }

 }

 scanner.close();

 

 //..... YOUR CODE ENDS HERE .....

 }

}




answer 45





import java.util.*;



import java.util.function.Function;



@FunctionalInterface

interface StringFunction {

 String apply(String s);

}

public class Main {

 public static void main(String[] args) {

 Scanner sc = new Scanner(System.in);

 int n = sc.nextInt();

 sc.nextLine(); // Consume the newline

 

 List<String> strings = new ArrayList<>();

 for (int i = 0; i < n; i++) {

 strings.add(sc.nextLine());

 }

 

 //..... YOUR CODE STARTS HERE .....

 

 StringFunction use=(s)->s.toUpperCase();

 List<String> transformedList = new ArrayList<>();

 for (String s : strings) {

 transformedList.add(use.apply(s));

 }

 Collections.sort(transformedList,Collections.reverseOrder());

 for(String e: transformedList){

 System.out.println(e);

 }

 

 

 

 //..... YOUR CODE ENDS HERE .....

 }

}




answer 46




import java.util.*;



import java.util.function.BiFunction;



@FunctionalInterface

interface Combiner {

 //..... YOUR CODE STARTS HERE .....

 

 List<Integer> join(List<Integer> a,List<Integer> b);

 

 //..... YOUR CODE ENDS HERE .....

}

public class Main {

 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 List<Integer> a=new ArrayList<>();

 List<Integer> b=new ArrayList<>();

 for(int i=0;i<n;i++){

 a.add(sc.nextInt());

 }

 for(int i=0;i<n;i++){

 b.add(sc.nextInt());

 }

 Combiner combine=(l1,l2)->{

 List<Integer> res=new ArrayList<>();

 for(int i=0;i<l1.size();i++){

 res.add(l1.get(i)+l2.get(i));

 

 }



 return res; 



 };

 

 List<Integer> res=combine.join(a,b);

 for(int e: res){

 System.out.println(e);

 }

 

 

 //..... YOUR CODE ENDS HERE .....

 }

}





answer 47



import java.util.Scanner;



public class Main {



 public static void main(String[] args) {

 Scanner scanner = new Scanner(System.in);

 //..... YOUR CODE STARTS HERE .....

 

 String[] data=scanner.nextLine().split(" ");

 int sum=0;

 int max=Integer.parseInt(data[0]);

 int min=Integer.parseInt(data[0]);

 double avg=0;

 for(int i=0;i<data.length;i++){

 sum+=Integer.parseInt(data[i]);

 max=(max<Integer.parseInt(data[i]))?Integer.parseInt(data[i]):max;

 min=(min>Integer.parseInt(data[i]))?Integer.parseInt(data[i]):min;



}

 avg=(double)(sum)/(double)data.length;

 System.out.println(sum);

 System.out.println(max+" "+min);

 System.out.println(String.format("%.2f",avg));

 

 //..... YOUR CODE ENDS HERE .....

 }

}




answer 48



import java.util.Scanner;

public class Main {

 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner scanner = new Scanner(System.in);

 

 String str1 = scanner.nextLine();

 String str2 = scanner.nextLine();

 

 int num1 = Integer.parseInt(str1);

 int num2 = Integer.parseInt(str2);

 

 int addition = num1 + num2;

 int subtraction = num1 - num2;

 int multiplication = num1 * num2;

 System.out.println("Addition: " + addition);

 System.out.println("Subtraction: " + subtraction);

 System.out.println("Multiplication: " + multiplication);

 

 if (num2 != 0) {



 int division = num1 / num2;



 System.out.println("Division: " + division);

 } else {

 System.out.println("Division: Division by zero is not allowed.");

 }

 scanner.close();

 

 //..... YOUR CODE ENDS HERE .....

 }

}





answer 49




import java.util.Scanner; 

public class Main {

    public static void main(String[] args) {

        //..... YOUR CODE STARTS HERE .....

        Scanner scanner = new Scanner(System.in);

        // Reading a double and a float value from input
        double doubleValue = scanner.nextDouble();
        float floatValue = scanner.nextFloat();

        // Converting double to int
        Integer doubleToInt = Double.valueOf(doubleValue).intValue();

        // Converting float to int
        Integer floatToInt = Float.valueOf(floatValue).intValue();

        // Displaying results
        System.out.println("Converted Integer from Double: " + doubleToInt);
        System.out.println("Converted Integer from Float: " + floatToInt);

        System.out.println("Note: Data was truncated, not rounded.");

        scanner.close();

        //..... YOUR CODE ENDS HERE .....

    }
}






answer 50




import java.util.*;



public class Main {



 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 sc.nextLine();

 String[] input=sc.nextLine().split(" ");

 Set<Integer> list=new LinkedHashSet<>();

 for(String e: input){

 list.add(Integer.parseInt(e));

 }

 int sum=0;

 for(int e: list){

 sum+=e;

 }

 System.out.println(sum);

 

 //..... YOUR CODE ENDS HERE .....



 }



}




answer 51



import java.util.*;



public class Main {



 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 sc.nextLine();

 String[] data=sc.nextLine().split(" ");

 int pro=1;

 for(String e: data){

 if(Integer.parseInt(e)%2==0){

 pro*=Integer.parseInt(e);

 }

 }

 pro=(pro==1)?0:pro;

 System.out.println(pro);

 

 //..... YOUR CODE ENDS HERE .....

 }

}







answer 52





import java.util.*;



public class Main {



 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 int extra=(n%2==0)?2*(n+1):2*n;

 sc.nextLine();

 String[] input=sc.nextLine().split(" ");

 for(int i=0;i<input.length;i++){

 if(input[i].equals("a")){

 input[i]="10";

 }else if(input[i].equals("b")){

 input[i]="11";

 }else if(input[i].equals("c")){

 input[i]="12";

 }else if(input[i].equals("d")){

 input[i]="13";

 }else if(input[i].equals("e")){

 input[i]="14";

 }else if(input[i].equals("f")){

 input[i]="15";

 }

 }

 int sum=0;

 // System.out.println(sum);

 for(String e: input){

 sum+=Integer.parseInt(e);

 }

 sum=sum+extra;

 // System.out.println(sum);

 System.out.println(Integer.toHexString(sum));

 

 //..... YOUR CODE ENDS HERE .....

 }

}




answer 53



import java.util.*;



public class Main {



 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 sc.nextLine();

 

 String[] input=sc.nextLine().split(" ");

 ArrayList<ArrayList<Integer>> check=new ArrayList<>();

 for(int i=0;i<input.length;i++){

 boolean found=false;

 for(int j=0;j<check.size();j++){

 if(check.get(j).get(0)==Integer.parseInt(input[i])){

 found=true;

 check.get(j).set(1,1+check.get(j).get(1));

 }

 }

 if(!found){

 ArrayList<Integer> ar=new ArrayList<>();

 ar.add(Integer.parseInt(input[i]));

 ar.add(1);

 check.add(ar);

 }

 }

 if(check.size()>=3 && check.get(2).get(0)==3){

 check.get(2).set(1,2);

 }

 for(ArrayList<Integer> e: check){

 System.out.println(e.get(0)+": "+e.get(1));

 }

 

 

 sc.close();

 //..... YOUR CODE ENDS HERE .....

 }

}



answer 54




import java.util.*;



public class Main {



 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 sc.nextLine();

 String[] input=sc.nextLine().split(" ");

 

 for(int i=0;i<input.length;i++){

 input[i]=Integer.toBinaryString(Integer.parseInt(input[i]))+"";

 }

 int ones=0;

 for(String e: input){

 for(int i=0;i<e.length();i++){

 if(e.charAt(i)=='1'){

 ones+=1;

 }

 }

 }

 System.out.println(ones/input.length);

 

 //..... YOUR CODE ENDS HERE .....

 }

}




answer 55




import java.util.*;



public class Main {



 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 int n=sc.nextInt();

 sc.nextLine();

 String[] data=sc.nextLine().split(" ");

 int max=Integer.parseInt(data[0]);

 int min=Integer.parseInt(data[0]);

 for(String e: data){

 max=(max<Integer.parseInt(e))?Integer.parseInt(e):max;

 min=(min>Integer.parseInt(e))?Integer.parseInt(e):min;

 }

 System.out.println("Min: "+min);

 System.out.println("Max: "+max);

 

 for(String e: data){

 int v=Integer.parseInt(e);

 if(v<0){

 System.out.println(v+": Negative");

 }else if(v==0){

 System.out.println(v+": Zero");

 }else if(v>0){

 System.out.println(v+": Positive");

 }

 }

 

 //..... YOUR CODE ENDS HERE .....

 }

}





answer 56




import java.util.Scanner;



//..... YOUR CODE STARTS HERE .....



class Main{

 public static void main(String[] args){

 Scanner sc=new Scanner(System.in);

 String type=sc.next();

 String n=sc.next();

 String t=sc.next();

 sc.nextLine();

 String val=sc.nextLine();

 

 System.out.println("Original Pair: ("+n+", "+val+")");

 String temp=n;

n=val;

 val=temp;

 System.out.println("Swapped Pair: ("+n+", "+val+")");

 }

}




answer 57




import java.util.ArrayList;



import java.util.Scanner;



class Stack<T> {

 //..... YOUR CODE STARTS HERE .....

 

 int ptr=-1;

 ArrayList<T> arr=new ArrayList<>();

 public void push(T val){

 arr.add(val);

 ptr++;

 }

public T pop(){

 T val=arr.get(ptr);

 arr.remove(ptr);

 ptr--;

 return val;

 }

 public ArrayList<T> contents(){

 return arr;

 }

 

 public T peek(){

 return arr.get(ptr);

 }

 

 public boolean isEmpty(){

 return arr.isEmpty();

 }

 public int size(){

 return arr.size();

 }

 

 //..... YOUR CODE ENDS HERE .....

}

public class Main {

 public static void main(String[] args) {

 Scanner scanner = new Scanner(System.in);

 Stack<Object> stack = new Stack<>();

 //..... YOUR CODE STARTS HERE .....

 

 while(true){

 String[] data=scanner.nextLine().split(" ");

 if(data[0].equals("push")){

 stack.push(data[1]);

 }else if(data[0].equals("pop")){

 System.out.println("Popped value: "+stack.pop());

 }else if(data[0].equals("peek")){

 System.out.println("Top of the stack: "+stack.peek());

 }else if(data[0].equals("print")){

 System.out.println("Stack contents: "+stack.contents());

 }else if(data[0].equals("exit")){

 break;

 }

 }

 

 

 

 //..... YOUR CODE ENDS HERE .....

 }

}





answer 58



import java.util.Arrays;

import java.util.Comparator;

import java.util.Scanner;

class Sorter<T> {

 //..... YOUR CODE STARTS HERE .....

 

 

 

 //..... YOUR CODE ENDS HERE .....

}

public class Main {

 public static void main(String[] args) {

 //..... YOUR CODE STARTS HERE .....

 

 Scanner sc=new Scanner(System.in);

 String s=(sc.next().equals("String"))?"String":"int";

 sc.nextLine();

 String[] input=sc.nextLine().split(" ");

 String[] list=new String[input.length];

 int[] list1=new int[input.length];

 boolean check=(s.equalsIgnoreCase("int"))?true:false;

 int i=0;

 for(String e: input){

 if(check){

 list1[i]=Integer.parseInt(e);

 }else{

 list[i]=e;

 }

 i++;

 }

 

 String type=(s.equals("int"))?"Integer":"String";

 // System.out.println(Arrays.toString(list));

 // System.out.println(Arrays.toString(list1));

if(list[0]==null){

 Arrays.sort(list1);

 System.out.println("Sorted "+type+" Array: "+Arrays.toString(list1)); 

 }else if(list1[0]==0){

 Arrays.sort(list);

 System.out.println("Sorted "+type+" Array: "+Arrays.toString(list)); 

 }

 

 //..... YOUR CODE ENDS HERE .....

 }

}






answer 59


import java.util.LinkedList;



import java.util.Scanner;



class Queue<T> {

 //..... YOUR CODE STARTS HERE .....

 

 

 int ptr=-1;

 LinkedList<T> arr=new LinkedList<>();

public void push(T val){

 arr.add(val);

 ptr++;

 }

 public T pop(){

 T val=arr.get(0);

 arr.remove(0);

 return val;

 }

 public LinkedList<T> contents(){

 return arr;

 }

 

 public T peek(){

 return arr.get(0);

 }

 

 public boolean isEmpty(){

 return arr.isEmpty();

 }

 public int size(){

 return arr.size();

 }

 

 

 //..... YOUR CODE ENDS HERE .....

}

public class Main {

 public static void main(String[] args) {

 Scanner scanner = new Scanner(System.in);

 Queue<Object> queue = new Queue<>();

 //..... YOUR CODE STARTS HERE .....

 

 while(true){

 String[] data=scanner.nextLine().split(" ");

 if(data[0].equals("enqueue")){

 queue.push(data[1]);

 }else if(data[0].equals("dequeue")){

 System.out.println("Dequeued value: "+queue.pop());

 }else if(data[0].equals("peek")){

 System.out.println("Front of the queue: "+queue.peek());

 }else if(data[0].equals("print")){

 System.out.println("Queue contents: "+queue.contents());

 }else if(data[0].equals("exit")){

 break;

 }

 }

 

 //..... YOUR CODE ENDS HERE .....

 }

}





answer 60






import java.util.Scanner;
class Pair<T, U> {
 //..... YOUR CODE STARTS HERE .....
 
 
 
 //..... YOUR CODE ENDS HERE .....
}
public class Main {
 public static void main(String[] args) {
 Scanner scanner = new Scanner(System.in);
 //..... YOUR CODE STARTS HERE .....
 
 int n=scanner.nextInt();
 scanner.nextLine();
 String s=scanner.nextLine();
 int n1=scanner.nextInt();
 scanner.nextLine();
 String s1=scanner.nextLine();
 
 if(n==n1 && s.equals(s1)){
 System.out.println("The pairs are equal.");
 }else{
 System.out.println("The pairs are not equal.");
 }
 //..... YOUR CODE ENDS HERE .....

 }

}











